#include <iostream>
#include <unistd.h>
#include <cstring>
#include <sys/wait.h>

using namespace std;

const int BUFFER_SIZE = 256;

void process1(int writePipe, int readPipe) {
    char buffer[BUFFER_SIZE];
    while (true) {
        // Send message to process 2
        string message;
        cout << "Process 1: Enter a message: ";
        getline(cin, message);
        write(writePipe, message.c_str(), message.size() + 1);

        // Check if message is "GoodBye"
        if (message == "GoodBye") {
            cout << "Process 1 terminating..." << endl;
            break;
        }

        // Receive response from process 2
        read(readPipe, buffer, BUFFER_SIZE);
        cout << "Process 1 received: " << buffer << endl;

        if (strcmp(buffer, "GoodBye") == 0) {
            cout << "Process 1 terminating..." << endl;
            break;
        }
    }
}

void process2(int writePipe, int readPipe) {
    char buffer[BUFFER_SIZE];
    while (true) {
        // Receive message from process 1
        read(readPipe, buffer, BUFFER_SIZE);
        cout << "Process 2 received: " << buffer << endl;

        if (strcmp(buffer, "GoodBye") == 0) {
            cout << "Process 2 terminating..." << endl;
            break;
        }

        // Send response to process 1
        string message;
        cout << "Process 2: Enter a message: ";
        getline(cin, message);
        write(writePipe, message.c_str(), message.size() + 1);

        if (message == "GoodBye") {
            cout << "Process 2 terminating..." << endl;
            break;
        }
    }
}

int main() {
    int pipe1[2], pipe2[2]; // Two pipes for communication

    // Create pipes
    if (pipe(pipe1) == -1 || pipe(pipe2) == -1) {
        perror("Pipe creation failed");
        return 1;
    }

    pid_t pid = fork(); // Create a new process

    if (pid == -1) {
        perror("Fork failed");
        return 1;
    } else if (pid == 0) {
        // Child process (Process 2)
        close(pipe1[1]); // Close unused write end of pipe1
        close(pipe2[0]); // Close unused read end of pipe2
        process2(pipe2[1], pipe1[0]);
    } else {
        // Parent process (Process 1)
        close(pipe1[0]); // Close unused read end of pipe1
        close(pipe2[1]); // Close unused write end of pipe2
        process1(pipe1[1], pipe2[0]);

        // Wait for the child to terminate
        wait(nullptr);
    }

    return 0;
}
