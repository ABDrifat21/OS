#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

// Global variable
int global_counter = 0;

// Mutex for synchronization
pthread_mutex_t lock;

// Thread function without mutex (causes inconsistency)
void *increment_without_mutex(void *arg) {
    for (int i = 0; i < 100000; i++) {
        global_counter++; // No lock
    }
    return NULL;
}

// Thread function with mutex (fixes inconsistency)
void *increment_with_mutex(void *arg) {
    for (int i = 0; i < 100000; i++) {
        pthread_mutex_lock(&lock); // Lock the critical section
        global_counter++;
        pthread_mutex_unlock(&lock); // Unlock the critical section
    }
    return NULL;
}

int main() {
    pthread_t thread1, thread2;

    // Initialize the mutex
    pthread_mutex_init(&lock, NULL);

    printf("Demonstrating inconsistency without mutex:\n");
    global_counter = 0;

    // Create threads without mutex
    pthread_create(&thread1, NULL, increment_without_mutex, NULL);
    pthread_create(&thread2, NULL, increment_without_mutex, NULL);

    // Wait for threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Global counter without mutex: %d\n", global_counter);

    printf("\nDemonstrating consistency with mutex:\n");
    global_counter = 0;

    // Create threads with mutex
    pthread_create(&thread1, NULL, increment_with_mutex, NULL);
    pthread_create(&thread2, NULL, increment_with_mutex, NULL);

    // Wait for threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Global counter with mutex: %d\n", global_counter);

    // Destroy the mutex
    pthread_mutex_destroy(&lock);

    return 0;
}


